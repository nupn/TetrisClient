// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerMessage.proto

#ifndef PROTOBUF_ServerMessage_2eproto__INCLUDED
#define PROTOBUF_ServerMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ServerMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoginImpl();
void InitDefaultsLogin();
void InitDefaultsChatImpl();
void InitDefaultsChat();
void InitDefaultsMove_PositionImpl();
void InitDefaultsMove_Position();
void InitDefaultsMoveImpl();
void InitDefaultsMove();
inline void InitDefaults() {
  InitDefaultsLogin();
  InitDefaultsChat();
  InitDefaultsMove_Position();
  InitDefaultsMove();
}
}  // namespace protobuf_ServerMessage_2eproto
namespace ServerMessage {
class Chat;
class ChatDefaultTypeInternal;
extern ChatDefaultTypeInternal _Chat_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Move;
class MoveDefaultTypeInternal;
extern MoveDefaultTypeInternal _Move_default_instance_;
class Move_Position;
class Move_PositionDefaultTypeInternal;
extern Move_PositionDefaultTypeInternal _Move_Position_default_instance_;
}  // namespace ServerMessage
namespace ServerMessage {

enum MessageType {
  LOGIN = 0,
  CHAT = 1,
  MOVE = 2
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = LOGIN;
const MessageType MessageType_MAX = MOVE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Login* other);
  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Login* New() const PROTOBUF_FINAL { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Login* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerMessage.Login)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
  friend void ::protobuf_ServerMessage_2eproto::InitDefaultsLoginImpl();
};
// -------------------------------------------------------------------

class Chat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Chat) */ {
 public:
  Chat();
  virtual ~Chat();

  Chat(const Chat& from);

  inline Chat& operator=(const Chat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chat(Chat&& from) noexcept
    : Chat() {
    *this = ::std::move(from);
  }

  inline Chat& operator=(Chat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chat* internal_default_instance() {
    return reinterpret_cast<const Chat*>(
               &_Chat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Chat* other);
  friend void swap(Chat& a, Chat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chat* New() const PROTOBUF_FINAL { return New(NULL); }

  Chat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chat& from);
  void MergeFrom(const Chat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required int32 dst_id = 2;
  bool has_dst_id() const;
  void clear_dst_id();
  static const int kDstIdFieldNumber = 2;
  ::google::protobuf::int32 dst_id() const;
  void set_dst_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerMessage.Chat)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_dst_id();
  void clear_has_dst_id();
  void set_has_message();
  void clear_has_message();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 dst_id_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
  friend void ::protobuf_ServerMessage_2eproto::InitDefaultsChatImpl();
};
// -------------------------------------------------------------------

class Move_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Move.Position) */ {
 public:
  Move_Position();
  virtual ~Move_Position();

  Move_Position(const Move_Position& from);

  inline Move_Position& operator=(const Move_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Move_Position(Move_Position&& from) noexcept
    : Move_Position() {
    *this = ::std::move(from);
  }

  inline Move_Position& operator=(Move_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Move_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Move_Position* internal_default_instance() {
    return reinterpret_cast<const Move_Position*>(
               &_Move_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Move_Position* other);
  friend void swap(Move_Position& a, Move_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Move_Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Move_Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Move_Position& from);
  void MergeFrom(const Move_Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Move_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:ServerMessage.Move.Position)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
  friend void ::protobuf_ServerMessage_2eproto::InitDefaultsMove_PositionImpl();
};
// -------------------------------------------------------------------

class Move : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage.Move) */ {
 public:
  Move();
  virtual ~Move();

  Move(const Move& from);

  inline Move& operator=(const Move& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Move(Move&& from) noexcept
    : Move() {
    *this = ::std::move(from);
  }

  inline Move& operator=(Move&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Move& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Move* internal_default_instance() {
    return reinterpret_cast<const Move*>(
               &_Move_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Move* other);
  friend void swap(Move& a, Move& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Move* New() const PROTOBUF_FINAL { return New(NULL); }

  Move* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Move& from);
  void MergeFrom(const Move& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Move* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Move_Position Position;

  // accessors -------------------------------------------------------

  // repeated .ServerMessage.Move.Position track = 2;
  int track_size() const;
  void clear_track();
  static const int kTrackFieldNumber = 2;
  const ::ServerMessage::Move_Position& track(int index) const;
  ::ServerMessage::Move_Position* mutable_track(int index);
  ::ServerMessage::Move_Position* add_track();
  ::google::protobuf::RepeatedPtrField< ::ServerMessage::Move_Position >*
      mutable_track();
  const ::google::protobuf::RepeatedPtrField< ::ServerMessage::Move_Position >&
      track() const;

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerMessage.Move)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ServerMessage::Move_Position > track_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_ServerMessage_2eproto::TableStruct;
  friend void ::protobuf_ServerMessage_2eproto::InitDefaultsMoveImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// required int32 id = 1;
inline bool Login::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Login::id() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Login.id)
  return id_;
}
inline void Login::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.Login.id)
}

// required string name = 2;
inline bool Login::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Login.name)
  return name_.GetNoArena();
}
inline void Login::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerMessage.Login.name)
}
#if LANG_CXX11
inline void Login::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.Login.name)
}
#endif
inline void Login::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.Login.name)
}
inline void Login::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.Login.name)
}
inline ::std::string* Login::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ServerMessage.Login.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_name() {
  // @@protoc_insertion_point(field_release:ServerMessage.Login.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.Login.name)
}

// -------------------------------------------------------------------

// Chat

// required string name = 1;
inline bool Chat::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chat::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chat::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Chat::name() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Chat.name)
  return name_.GetNoArena();
}
inline void Chat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerMessage.Chat.name)
}
#if LANG_CXX11
inline void Chat::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.Chat.name)
}
#endif
inline void Chat::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.Chat.name)
}
inline void Chat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.Chat.name)
}
inline ::std::string* Chat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ServerMessage.Chat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_name() {
  // @@protoc_insertion_point(field_release:ServerMessage.Chat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.Chat.name)
}

// required int32 dst_id = 2;
inline bool Chat::has_dst_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chat::set_has_dst_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chat::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chat::clear_dst_id() {
  dst_id_ = 0;
  clear_has_dst_id();
}
inline ::google::protobuf::int32 Chat::dst_id() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Chat.dst_id)
  return dst_id_;
}
inline void Chat::set_dst_id(::google::protobuf::int32 value) {
  set_has_dst_id();
  dst_id_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.Chat.dst_id)
}

// required string message = 3;
inline bool Chat::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chat::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chat::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& Chat::message() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Chat.message)
  return message_.GetNoArena();
}
inline void Chat::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerMessage.Chat.message)
}
#if LANG_CXX11
inline void Chat::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.Chat.message)
}
#endif
inline void Chat::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.Chat.message)
}
inline void Chat::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.Chat.message)
}
inline ::std::string* Chat::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:ServerMessage.Chat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Chat::release_message() {
  // @@protoc_insertion_point(field_release:ServerMessage.Chat.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Chat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.Chat.message)
}

// -------------------------------------------------------------------

// Move_Position

// required float x = 1;
inline bool Move_Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Move_Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Move_Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Move_Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Move_Position::x() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Move.Position.x)
  return x_;
}
inline void Move_Position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.Move.Position.x)
}

// required float y = 2;
inline bool Move_Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Move_Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Move_Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Move_Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Move_Position::y() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Move.Position.y)
  return y_;
}
inline void Move_Position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.Move.Position.y)
}

// -------------------------------------------------------------------

// Move

// required int32 id = 1;
inline bool Move::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Move::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Move::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Move::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Move::id() const {
  // @@protoc_insertion_point(field_get:ServerMessage.Move.id)
  return id_;
}
inline void Move::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.Move.id)
}

// repeated .ServerMessage.Move.Position track = 2;
inline int Move::track_size() const {
  return track_.size();
}
inline void Move::clear_track() {
  track_.Clear();
}
inline const ::ServerMessage::Move_Position& Move::track(int index) const {
  // @@protoc_insertion_point(field_get:ServerMessage.Move.track)
  return track_.Get(index);
}
inline ::ServerMessage::Move_Position* Move::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:ServerMessage.Move.track)
  return track_.Mutable(index);
}
inline ::ServerMessage::Move_Position* Move::add_track() {
  // @@protoc_insertion_point(field_add:ServerMessage.Move.track)
  return track_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ServerMessage::Move_Position >*
Move::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:ServerMessage.Move.track)
  return &track_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerMessage::Move_Position >&
Move::track() const {
  // @@protoc_insertion_point(field_list:ServerMessage.Move.track)
  return track_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerMessage

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ServerMessage::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ServerMessage::MessageType>() {
  return ::ServerMessage::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServerMessage_2eproto__INCLUDED
